package main

import "fmt"

func main() {

	// 변수의 메모리주소를 보고 싶다면 변수앞에 &variable 로 앞에 &만 붙여주면된다.
	// & 는 변수의 메모리주소 pointer

	// 메모리주소의 값을 보고싶다면 *(memory_address) 를 하면된다.
	// * == value of address

	// 변수 복사 1
	a := 2
	b := a
	a = 10
	fmt.Println("a의 메모리주소 :", &a, ", ", "b의 메모리주소 : ", &b)
	fmt.Println("a의 값 :", a, ", ", "b의 값 : ", b)
	// a의 메모리주소 : 0x1400018e008 ,  b의 메모리주소 :  0x1400018e010
	// a의 값 : 10 ,  b의 값 :  2
	// 위의 방식은 메모리가아닌 값만 복사하는 방식이다
	// a에 2 값을 주고 b 에게는 a의 값인 2만을 주는 것이다.

	// // 변수 복사 2
	c := 3
	d := &c
	c = 15
	fmt.Println("c의 메모리주소 :", &c, ", ", "d의 메모리주소 : ", d)
	fmt.Println("c의 값 :", c, ", ", "d의 값 : ", *d)

	// c의 메모리주소 : 0x1400011c028 ,  d의 메모리주소 :  0x1400011c028
	// c의 값 : 15 ,  d의 값 :  15
	// 이 방식은 d에게 c의 값을 주는 것이아닌 c의 메모리주소를 준다.
	// 그래서 만약 c 에게 다른 값을 주어도 해당 메모리의 값도 같이 바뀌기 때문에
	// *d 로 메모리의 값을 불러온다면 마지막에 c의 메모리주소의 값을 읽어 15로 받는다.

	// 변수복사 3
	e := 2
	f := &e
	*f = 20
	fmt.Println("e의 메모리주소 :", &e, ", ", "f의 메모리주소 : ", f)
	fmt.Println("e의 값 :", e, ", ", "f의 값 : ", *f)
	fmt.Println("e == *(&e) 는 참인가 ? : ", e == *(&e))

	// e의 메모리주소 : 0x1400018e020 ,  f의 메모리주소 :  0x1400018e020
	// e의 값 : 20 ,  f의 값 :  20
	// e == *(&e) 는 참인가 ? :  true
	// *f 에게 20의 값을 준다는 것은 f 가 &e 즉 메모리주소이고
	// *(&e) == e 이기때문에 e 가 20 이되고 e의 메모리주소의 값이 20으로 변경되었다.
	// f := &e 이기 때문에 f가 바라보는 e의 * 변수값은 20이 된다.

}
